Index: app/src/main/java/cn/edu/uestc/meet_on_the_road_of_uestc/fragment/NavFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.edu.uestc.meet_on_the_road_of_uestc.fragment;\n\n\nimport android.Manifest;\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.graphics.Color;\nimport android.location.Location;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.provider.ContactsContract;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.support.v4.app.ActivityCompat;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.content.ContextCompat;\nimport android.text.Editable;\nimport android.text.TextWatcher;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.LayoutInflater;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.ListView;\nimport android.widget.Toast;\n\nimport com.amap.api.location.AMapLocation;\nimport com.amap.api.location.AMapLocationClient;\nimport com.amap.api.location.AMapLocationClientOption;\nimport com.amap.api.location.AMapLocationListener;\nimport com.amap.api.maps.AMap;\nimport com.amap.api.maps.CameraUpdate;\nimport com.amap.api.maps.CameraUpdateFactory;\nimport com.amap.api.maps.MapView;\nimport com.amap.api.maps.UiSettings;\nimport com.amap.api.maps.model.HeatmapTileProvider;\nimport com.amap.api.maps.model.LatLng;\nimport com.amap.api.maps.model.Marker;\nimport com.amap.api.maps.model.MarkerOptions;\nimport com.amap.api.maps.model.MyLocationStyle;\nimport com.amap.api.maps.model.Polyline;\nimport com.amap.api.maps.model.PolylineOptions;\nimport com.amap.api.maps.model.TileOverlayOptions;\nimport com.amap.api.services.core.LatLonPoint;\nimport com.amap.api.services.core.PoiItem;\nimport com.amap.api.services.geocoder.GeocodeResult;\nimport com.amap.api.services.geocoder.GeocodeSearch;\nimport com.amap.api.services.geocoder.RegeocodeQuery;\nimport com.amap.api.services.geocoder.RegeocodeResult;\nimport com.amap.api.services.help.Inputtips;\nimport com.amap.api.services.help.InputtipsQuery;\nimport com.amap.api.services.help.Tip;\nimport com.amap.api.services.nearby.NearbyInfo;\nimport com.amap.api.services.nearby.NearbySearch;\nimport com.amap.api.services.nearby.NearbySearchFunctionType;\nimport com.amap.api.services.nearby.NearbySearchResult;\nimport com.amap.api.services.nearby.UploadInfo;\nimport com.amap.api.services.nearby.UploadInfoCallback;\nimport com.amap.api.services.poisearch.PoiResult;\nimport com.amap.api.services.poisearch.PoiSearch;\nimport com.amap.api.services.route.BusRouteResult;\nimport com.amap.api.services.route.DriveRouteResult;\nimport com.amap.api.services.route.RideRouteResult;\nimport com.amap.api.services.route.RouteSearch;\nimport com.amap.api.services.route.WalkPath;\nimport com.amap.api.services.route.WalkRouteResult;\nimport com.amap.api.services.route.WalkStep;\nimport com.google.gson.Gson;\n\nimport org.json.JSONObject;\n\nimport java.io.FileDescriptor;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.net.HttpURLConnection;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.concurrent.TimeUnit;\n\nimport cn.edu.uestc.meet_on_the_road_of_uestc.MyApplication;\nimport cn.edu.uestc.meet_on_the_road_of_uestc.R;\nimport cn.edu.uestc.meet_on_the_road_of_uestc.adapter.InputTipsAdapter;\nimport cn.edu.uestc.meet_on_the_road_of_uestc.bean.traceTime;\nimport dev.DevUtils;\nimport dev.utils.app.ADBUtils;\nimport dev.utils.app.PhoneUtils;\nimport dev.utils.app.logger.DevLogger;\nimport dev.utils.app.logger.LogConfig;\nimport dev.utils.app.logger.LogLevel;\nimport dev.utils.common.HttpURLConnectionUtils;\nimport okhttp3.Call;\nimport okhttp3.Callback;\nimport okhttp3.FormBody;\nimport okhttp3.MediaType;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okhttp3.Response;\n\nimport static java.lang.Enum.valueOf;\n\npublic class NavFragment extends Fragment implements PoiSearch.OnPoiSearchListener,\n        Inputtips.InputtipsListener,GeocodeSearch.OnGeocodeSearchListener,\n        RouteSearch.OnRouteSearchListener,NearbySearch.NearbyListener,AMap.OnMarkerClickListener {\n    private MapView mMapView;\n    public AMapLocationClient mLocationClient;\n    //声明AMapLocationClientOption对象\n    public AMapLocationClientOption mLocationOption = null;\n    private LatLng mCurLocation;\n    private String address;\n    AMap aMap;\n    OkHttpClient mOkHttpClient;\n    private double Latitude;\n    private double Longitude;\n    Gson mGson=new Gson();\n    String location_json;\n    MediaType mediaTypeJson=MediaType.parse(\"application/json;charset=utf-8\");\n    EditText searchPoi;\n    ArrayList poiArray=null;\n    String poiKey;\n    PoiSearch poiSearch;\n    PoiSearch.Query query;\n    NearbySearch.NearbyQuery nearbyQuery;\n    String keywords;\n    ArrayList<PoiItem> array;\n    PoiSearch.Query searchquery;\n    private ListView mInputListView;\n    private String address_title;\n    private String address_detail;\n    InputTipsAdapter mAdapter;\n    RouteSearch routeSearch;\n    LatLonPoint mLatLonPoint;\n    List<NearbyInfo> nearbyInfoList;\n    ImageView nearByview;\n    private Timer timer;\n    private TimerTask task;\n    HashMap<String,Marker> nearByUserMap=new HashMap<String,Marker>();\n    LatLonPoint nearbyLatLonPoint;\n    int isAmapClear=0;\n    ImageView run;\n    long serviceId = 207968;\n    String traceTimeJson;\n    private long startTime;\n    private long stopTime;\n    private OkHttpClient okHttpClient;\n    traceTime traceTime;\n\n\n\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view=getLayoutInflater().inflate(R.layout.fragment_nav,container,false);\n        //获取地图控件引用\n        mMapView = view.findViewById(R.id.map);\n        //在activity执行onCreate时执行mMapView.onCreate(savedInstanceState)，创建地图\n        mMapView.onCreate(savedInstanceState);\n        return view;\n    }\n\n    @SuppressLint(\"ClickableViewAccessibility\")\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        setUpMap();\n        ImageView help = getActivity().findViewById(R.id.emergency_help);\n        uploadNearbyInfo();\n        nearByview = getActivity().findViewById(R.id.nearBy);\n        final int[] flag = {0};\n        nearByview.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                switch (flag[0]) {\n                    case 0: {\n                        timer = new Timer();\n                        Handler searchhandler = new Handler() {\n                            @Override\n                            public void handleMessage(Message msg) {\n                                searchNearBy();\n                                super.handleMessage(msg);\n                            }\n                        };\n                        task = new TimerTask() {\n                            @Override\n                            public void run() {\n                                Message message = new Message();\n                                message.what = 1;\n                                searchhandler.sendMessage(message);\n                            }\n                        };\n                        timer.schedule(task, 2000, 3000);\n                        flag[0] = 1;\n                        break;\n                    }\n                    case 1: {\n                        timer.cancel();\n                        clearMarker();\n                        flag[0] = 0;\n                        break;\n                    }\n                }\n            }\n        });\n        help.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (ContextCompat.checkSelfPermission(getActivity(), Manifest.permission\n                        .CALL_PHONE) != PackageManager.PERMISSION_DENIED) {\n                    ActivityCompat.requestPermissions(getActivity(), new String[]{Manifest.permission.CALL_PHONE}, 1);\n                } else {\n                    call();\n                }\n            }\n        });\n        ImageView imageView = getActivity().findViewById(R.id.find);\n        imageView.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (mCurLocation == null) {\n                    Toast.makeText(getActivity(), \"当前信号不佳，请稍候...\", Toast.LENGTH_SHORT).show();\n                } else {\n                    aMap.moveCamera(CameraUpdateFactory.changeLatLng(mCurLocation));\n                }\n            }\n        });\n        mInputListView = getActivity().findViewById(R.id.inputtip_list);\n        doSearch();\n        mInputListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n                mInputListView.setVisibility(View.GONE);\n                Log.d(\"position\", String.valueOf(position));\n                aMap.moveCamera(CameraUpdateFactory.changeLatLng(mAdapter.getTip_Latlng(position)));\n                aMap.moveCamera(CameraUpdateFactory.zoomTo(19));//设置默认缩放级别\n                final Marker marker = aMap.addMarker(new MarkerOptions()\n                        .position(mAdapter.getTip_Latlng(position))\n                        .title(mAdapter.getTip_title(position))\n                        .snippet(mAdapter.getTip_address(position)));\n            }\n        });\n        setRandomRoute();\n        run = getActivity().findViewById(R.id.run);\n    }\n    /**\n     * 初始化高德地图\n     */\n    private void setUpMap(){\n        aMap = mMapView.getMap();\n        HeatMapCreate();\n        MyLocationStyle myLocationStyle;\n        myLocationStyle = new MyLocationStyle();\n        myLocationStyle.myLocationType(MyLocationStyle.LOCATION_TYPE_LOCATION_ROTATE_NO_CENTER);//连续定位、蓝点不会移动到地图中心点，定位点依照设备方向旋转，并且蓝点会跟随设备移动。\n        aMap.setMyLocationStyle(myLocationStyle);//设置定位蓝点的Style\n        aMap.getUiSettings().setMyLocationButtonEnabled(false);//设置默认定位按钮是否显示，非必需设置。\n        aMap.setMyLocationEnabled(true);// 设置为true表示启动显示定位蓝点，false表示隐藏定位蓝点并不进行定位，默认是false。\n        UiSettings mUiSettings=aMap.getUiSettings();//获取UI设置类\n        aMap.moveCamera(CameraUpdateFactory.zoomTo(19));//设置默认缩放级别\n        aMap.setOnMyLocationChangeListener(new AMap.OnMyLocationChangeListener() {\n            @Override\n            public void onMyLocationChange(Location location) {\n                if(location.getExtras().getInt(MyLocationStyle.ERROR_CODE)==0){\n                    Latitude=location.getLatitude();\n                    Longitude=location.getLongitude();\n                    mLatLonPoint=new LatLonPoint(Latitude,Longitude);\n                    mCurLocation=new LatLng(Latitude,Longitude,false);\n                }else{\n                    Log.e(\"AmapError\",\"location Error, ErrCode:\"+location.getExtras().getInt(MyLocationStyle.ERROR_CODE));\n                }\n            }\n        });\n        //定位监听器第一次获取位置需要一定时间，设置postDelayed来延迟移动相机视角\n        new Handler().postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                aMap.moveCamera(CameraUpdateFactory.changeLatLng(mCurLocation));\n            }\n        },2000);\n//        mLocationClient=new AMapLocationClient(MyApplication.getMyContext());\n//        mLocationOption = new AMapLocationClientOption();\n//        mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);\n//        mLocationOption.setNeedAddress(true);\n//        mLocationOption.setMockEnable(true);\n//        mLocationClient.setLocationOption(mLocationOption);\n//        mLocationClient.setLocationListener(new AMapLocationListener() {\n//            @Override\n//            public void onLocationChanged(AMapLocation aMapLocation) {\n//                if (aMapLocation.getErrorCode() == 0) {\n//                    Latitude=aMapLocation.getLatitude();\n//                    Longitude=aMapLocation.getLongitude();\n//                    mLatLonPoint=new LatLonPoint(Latitude,Longitude);\n//                    mCurLocation = new LatLng(Latitude, Longitude,false);\n//                    address = (aMapLocation.getProvince() + \"\"\n//                            + aMapLocation.getCity() + \"\"\n//                            + aMapLocation.getProvince() + \"\"\n//                            + aMapLocation.getDistrict() + \"\"\n//                            + aMapLocation.getStreet() + \"\"\n//                            + aMapLocation.getStreetNum());\n//                } else {\n//                    //定位失败时，可通过ErrCode（错误码）信息来确定失败的原因，errInfo是错误信息，详见错误码表。\n//                    Log.e(\"AmapError\", \"location Error, ErrCode:\"\n//                            + aMapLocation.getErrorCode() + \", errInfo:\"\n//                            + aMapLocation.getErrorInfo());\n//                }\n//            }\n//        });\n//        mLocationClient.startLocation();\n    }\n\n    public void call(){\n        Intent intent=new Intent(Intent.ACTION_DIAL);\n        intent.setData(Uri.parse(\"tel:61830110\"));\n        startActivity(intent);\n    }\n\n    /**\n     * 判断获取权限是否成功\n     * @param requestCode\n     * @param permissions\n     * @param grantResults\n     */\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        switch (requestCode){\n            case 1:\n                if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){\n                    call();\n                }else{\n                    Toast.makeText(getActivity(),\"You have denied the permission\",Toast.LENGTH_SHORT).show();\n                }\n                break;\n                default:\n                    break;\n        }\n    }\n\n    /**\n     * 初始化热点图\n     */\n    public void HeatMapCreate(){\n        LatLng[] latlngs = new LatLng[500];\n        double x = 30.749125;\n        double y = 103.931633;\n\n        for (int i = 0; i < 500; i++) {\n            double x_ = 0;\n            double y_ = 0;\n            x_ = Math.random() * 0.5 - 0.25;\n            y_ = Math.random() * 0.5 - 0.25;\n            latlngs[i] = new LatLng(x + x_, y + y_,false);\n        }\n        // 构建热力图 HeatmapTileProvider\n        HeatmapTileProvider.Builder builder = new HeatmapTileProvider.Builder();\n        builder.data(Arrays.asList(latlngs)) // 设置热力图绘制的数据\n                .gradient(HeatmapTileProvider.DEFAULT_GRADIENT); // 设置热力图渐变，有默认值 DEFAULT_GRADIENT，可不设置该接口\n        // Gradient 的设置可见参考手册\n        // 构造热力图对象\n        HeatmapTileProvider heatmapTileProvider = builder.build();\n        // 初始化 TileOverlayOptions\n        TileOverlayOptions tileOverlayOptions = new TileOverlayOptions();\n        tileOverlayOptions.tileProvider(heatmapTileProvider); // 设置瓦片图层的提供者\n        // 向地图上添加 TileOverlayOptions 类对象\n        aMap.addTileOverlay(tileOverlayOptions);\n    }\n\n    /**\n     * (已弃用）发送位置到服务器，现使用高德云图替代\n     */\n//    public void sendLocationtoServer(){\n//        mOkHttpClient=new OkHttpClient();\n//        mCurLocation location=new mCurLocation();\n//        location.setLatitude(Latitude);\n//        location.setLongitude(Longitude);\n//        location_json=mGson.toJson(location);\n//        RequestBody mLocation=FormBody.create(json,location_json);\n//        Request curLocation=new Request.Builder().url(\"http://47.107.162.132:80\")\n//                                            .post(mLocation)\n//                                            .build();\n//        mOkHttpClient.newCall(curLocation).enqueue(new Callback() {\n//            @Override\n//            public void onFailure(Call call, IOException e) {\n//                e.printStackTrace();\n//            }\n//\n//            @Override\n//            public void onResponse(Call call, Response response) throws IOException {\n//            }\n//        });\n//    }\n\n    /**\n     * 搜索框活动\n     */\n    protected void doSearch(){\n        searchPoi = getActivity().findViewById(R.id.inputPoi);\n        searchPoi.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n\n            }\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n                if(s!=null) {\n                    mInputListView.setVisibility(View.VISIBLE);\n                    InputtipsQuery inputquery = new InputtipsQuery(String.valueOf(s), \"成都市\");\n                    inputquery.setCityLimit(true);//限制在当前城市\n                    Inputtips inputTips = new Inputtips(MyApplication.getMyContext(), inputquery);\n                    inputTips.setInputtipsListener(NavFragment.this);\n                    inputTips.requestInputtipsAsyn();\n                }else{\n                    aMap.clear(true);\n                }\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {\n\n            }\n        });\n        searchPoi.setOnKeyListener(new View.OnKeyListener() {\n            @Override\n            public boolean onKey(View v, int keyCode, KeyEvent event) {\n                if (KeyEvent.KEYCODE_ENTER == keyCode && KeyEvent.ACTION_DOWN == event.getAction()) {\n                    keywords = searchPoi.getText().toString();\n                    searchquery = new PoiSearch.Query(keywords, \"\", \"郫都区\");\n                    searchquery.setPageSize(10);\n                    poiSearch = new PoiSearch(MyApplication.getMyContext(), searchquery);\n                    poiSearch.setOnPoiSearchListener(NavFragment.this);\n                    poiSearch.searchPOIAsyn();\n                    mInputListView.setVisibility(View.GONE);\n                    aMap.moveCamera(CameraUpdateFactory.zoomTo(15));//设置默认缩放级别\n                    return true;\n                }\n                return false;\n            }\n        });\n    }\n\n    /**\n     * poi搜索结果异步回调\n     * @param poiResult 搜索结果\n     * @param i 状态码\n     */\n    @Override\n    public void onPoiSearched(PoiResult poiResult, int i) {\n        aMap.clear(true);\n        array=poiResult.getPois();\n        Iterator it = array.iterator();\n        while (it.hasNext()) {\n            PoiItem poiItem=(PoiItem)it.next();\n            LatLng latLng=new LatLng(poiItem.getLatLonPoint().getLatitude(),poiItem.getLatLonPoint().getLongitude());\n            LatLonPoint latLonPoint=new LatLonPoint(poiItem.getLatLonPoint().getLatitude(),poiItem.getLatLonPoint().getLongitude());\n            GeocodeSearch geocoderSearch = new GeocodeSearch(MyApplication.getMyContext());\n            geocoderSearch.setOnGeocodeSearchListener(NavFragment.this);\n            RegeocodeQuery query = new RegeocodeQuery(latLonPoint,50,GeocodeSearch.AMAP);\n            geocoderSearch.getFromLocationAsyn(query);\n            final Marker marker = aMap.addMarker(new MarkerOptions().position(latLng).title(poiItem.getTitle()).snippet(poiItem.getSnippet()));\n        }\n        aMap.moveCamera(CameraUpdateFactory.changeLatLng(new LatLng(array.get(0).getLatLonPoint().getLatitude(),array.get(0).getLatLonPoint().getLongitude())));\n    }\n\n    @Override\n    public void onPoiItemSearched(PoiItem poiItem, int i) {\n\n    }\n\n    /**\n     * 获取输入框文字以获取提示\n     * @param list\n     * @param i\n     */\n    @Override\n    public void onGetInputtips(List<Tip> list, int i) {\n        // 正确返回\n        if (i == 1000) {\n            new Activity().runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    if(list.size()!=0) {\n                        List<String> listString = new ArrayList<String>();\n                        for (int i = 0; i < list.size(); i++) {\n                            listString.add(list.get(i).getName());\n                        }\n                        mAdapter = new InputTipsAdapter(MyApplication.getMyContext(), list);\n                        mInputListView.setAdapter(mAdapter);\n                    }\n                }\n            });\n        } else {\n            Toast.makeText(MyApplication.getMyContext(), \"错误码 :\" + i,Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    @Override\n    public void onRegeocodeSearched(RegeocodeResult regeocodeResult, int i) {\n        address_title=regeocodeResult.getRegeocodeAddress().getBuilding();\n        address_detail=regeocodeResult.getRegeocodeAddress().getFormatAddress();\n        Log.d(\"address_title\",address_title);\n        Log.d(\"address_detail\",address_detail);\n    }\n\n    @Override\n    public void onGeocodeSearched(GeocodeResult geocodeResult, int i) {\n\n    }\n\n    public void setRandomRoute(){\n        routeSearch = new RouteSearch(MyApplication.getMyContext());\n        routeSearch.setRouteSearchListener(this);\n        RouteSearch.FromAndTo fromAndTo=new RouteSearch.FromAndTo(new LatLonPoint(30.750036,103.928276),new LatLonPoint(30.750341,103.937428));\n        RouteSearch.WalkRouteQuery query = new RouteSearch.WalkRouteQuery(fromAndTo);\n        routeSearch.calculateWalkRouteAsyn(query);//开始算\n    }\n\n    @Override\n    public void onBusRouteSearched(BusRouteResult busRouteResult, int i) {\n\n    }\n\n    @Override\n    public void onDriveRouteSearched(DriveRouteResult driveRouteResult, int i) {\n\n    }\n\n    /**\n     * 步行路线搜索\n     * @param walkRouteResult 结果\n     * @param i 状态码\n     */\n    @Override\n    public void onWalkRouteSearched(WalkRouteResult walkRouteResult, int i) {\n        Log.d(\"walkroute\",String.valueOf(i));\n        aMap.clear(true);\n        WalkRouteResult mWalkRouteResult=walkRouteResult;\n        List<WalkPath> walkPaths=mWalkRouteResult.getPaths();\n        List<WalkStep> walkSteps=walkPaths.get(0).getSteps();\n        List<LatLng> latLngs=new ArrayList<LatLng>();\n        for(int temp1=0;temp1<walkSteps.size();temp1++) {\n            List<LatLonPoint> latLonPoints=walkSteps.get(temp1).getPolyline();\n            for (int temp = 0; temp < latLonPoints.size(); temp++) {\n                latLngs.add(new LatLng(latLonPoints.get(temp).getLatitude(), latLonPoints.get(temp).getLongitude()));\n            }\n        }\n        final Polyline polyline =aMap.addPolyline(new PolylineOptions().\n                addAll(latLngs).width(10).color(Color.argb(255, 1, 1, 1)));\n    }\n\n    /**\n     * 上传位置信息到服务器以获取附近的人\n     */\n    public void uploadNearbyInfo(){\n        DevUtils.init(MyApplication.getMyContext());\n        // == 初始化日志配置 ==\n        // 设置默认Logger配置\n        LogConfig logConfig = new LogConfig();\n        logConfig.logLevel = LogLevel.DEBUG;\n        logConfig.tag = \"LOG_TAG\";\n        DevLogger.init(logConfig);\n        // 打开 lib 内部日志\n        DevUtils.openLog();\n        DevUtils.openDebug();\n        NearbySearch mNearbySearch = NearbySearch.getInstance(MyApplication.getMyContext());\n        mNearbySearch.startUploadNearbyInfoAuto(new UploadInfoCallback() {\n            @Override\n            public UploadInfo OnUploadInfoCallback() {\n                UploadInfo loadInfo = new UploadInfo();\n                loadInfo.setCoordType(NearbySearch.AMAP);\n                //位置信息\n                loadInfo.setPoint(mLatLonPoint);\n                //用户id信息\n                loadInfo.setUserID(String.valueOf(PhoneUtils.getIMEI()));\n                Log.d(\"UserId\",String.valueOf(PhoneUtils.getIMEI()));\n                Log.d(\"Upload Info\",\"Upload Info\");\n                return loadInfo;\n            }\n        },10000);\n    }\n\n    /**\n     * 搜素附近的人\n     */\n    public void searchNearBy(){\n        NearbySearch mNearbySearch = NearbySearch.getInstance(MyApplication.getMyContext());\n        mNearbySearch.addNearbyListener(this);\n        //设置搜索条件\n        nearbyQuery = new NearbySearch.NearbyQuery();\n        //设置搜索的中心点\n        nearbyQuery.setCenterPoint(new LatLonPoint(30.749125,103.931633));\n        //设置搜索的坐标体系\n        nearbyQuery.setCoordType(NearbySearch.AMAP);\n        //设置搜索半径\n        nearbyQuery.setRadius(10000);\n        //设置查询的时间\n        nearbyQuery.setTimeRange(10000);\n        //设置查询的方式驾车还是距离\n        nearbyQuery.setType(NearbySearchFunctionType.DRIVING_DISTANCE_SEARCH);\n        //调用异步查询接口\n        NearbySearch.getInstance(MyApplication.getMyContext())\n                .searchNearbyInfoAsyn(nearbyQuery);\n    }\n\n    /**\n     * 清除地图上的点标记\n     */\n    public void clearMarker(){\n        aMap.clear(true);\n        isAmapClear=1;\n    }\n    @Override\n    public void onUserInfoCleared(int i) {\n\n    }\n\n    /**\n     * 搜索结果异步回调\n     * @param nearbySearchResult\n     * @param i\n     */\n    @Override\n    public void onNearbyInfoSearched(NearbySearchResult nearbySearchResult, int i) {\n        if(i==1000){\n            if(nearbySearchResult!=null) {\n                nearbyInfoList = nearbySearchResult.getNearbyInfoList();\n                for (NearbyInfo nearbyInfo : nearbyInfoList) {\n                    if(nearByUserMap==null){\n                        nearByUserMap=new HashMap<String,Marker>();\n                        LatLng latLng = new LatLng(nearbyInfo.getPoint().getLatitude(), nearbyInfo.getPoint().getLongitude());\n                        Marker marker = aMap.addMarker(new MarkerOptions().position(latLng).title(nearbyInfo.getUserID()).snippet(String.valueOf(nearbyInfo.getDistance())));\n                        nearByUserMap.put(nearbyInfo.getUserID(),marker);\n                    }else {\n                        if (nearByUserMap.containsKey(nearbyInfo.getUserID())) {\n                            if(nearbyInfo.getPoint().getLatitude() == nearbyLatLonPoint.getLatitude() && nearbyInfo.getPoint().getLongitude() == nearbyLatLonPoint.getLongitude()) {\n                                LatLng mLatLng = new LatLng(nearbyInfo.getPoint().getLatitude(), nearbyInfo.getPoint().getLongitude());\n                                Marker marker = nearByUserMap.get(nearbyInfo.getUserID());\n                                marker.setPosition(mLatLng);\n                            }else if(isAmapClear==1){\n                                aMap.addMarker(nearByUserMap.get(nearbyInfo.getUserID()).getOptions());\n                            }\n                        } else {\n                            nearbyLatLonPoint = nearbyInfo.getPoint();\n                            LatLng latLng = new LatLng(nearbyInfo.getPoint().getLatitude(), nearbyInfo.getPoint().getLongitude());\n                            Marker marker = aMap.addMarker(new MarkerOptions().position(latLng).title(nearbyInfo.getUserID()).snippet(String.valueOf(nearbyInfo.getDistance())));\n                            nearByUserMap.put(nearbyInfo.getUserID(), marker);\n                        }\n                    }\n                }\n                aMap.setOnMarkerClickListener(this);\n            }else{\n                Toast.makeText(MyApplication.getMyContext(),\"未搜索到周边的人\",Toast.LENGTH_SHORT).show();\n            }\n        }else{\n            Log.e(\"NearByService error\",\"错误码为:\"+i);\n        }\n    }\n\n    @Override\n    public boolean onMarkerClick(Marker marker) {\n        marker.showInfoWindow();\n        return false;\n    }\n\n    @Override\n    public void onNearbyInfoUploaded(int i) {\n\n    }\n\n    @Override\n    public void onRideRouteSearched(RideRouteResult rideRouteResult, int i) {\n\n    }\n\n    @Override\n    public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) {\n        super.dump(prefix, fd, writer, args);\n    }\n\n    public void setTraceTimeJson(){\n        DevUtils.init(MyApplication.getMyContext());\n        traceTime traceTime=new traceTime(PhoneUtils.getIMEI(),startTime,stopTime);\n    }\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        //在activity执行onDestroy时执行mMapView.onDestroyView()，销毁地图\n        mMapView.onDestroy();\n    }\n    @Override\n    public void onResume() {\n        super.onResume();\n        //在activity执行onResume时执行mMapView.onResume ()，重新绘制加载地图\n        mMapView.onResume();\n    }\n    @Override\n    public void onPause() {\n        super.onPause();\n        //在activity执行onPause时执行mMapView.onPause ()，暂停地图的绘制\n        mMapView.onPause();\n    }\n    @Override\n    public void onSaveInstanceState(Bundle outState) {\n        super.onSaveInstanceState(outState);\n        //在activity执行onSaveInstanceState时执行mMapView.onSaveInstanceState (outState)，保存地图当前的状态\n        mMapView.onSaveInstanceState(outState);\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/cn/edu/uestc/meet_on_the_road_of_uestc/fragment/NavFragment.java	(revision d20c8fec7dcf1fbbf308b9c83055cc6e846e3959)
+++ app/src/main/java/cn/edu/uestc/meet_on_the_road_of_uestc/fragment/NavFragment.java	(date 1545831291164)
@@ -73,6 +73,21 @@
 import com.amap.api.services.route.WalkPath;
 import com.amap.api.services.route.WalkRouteResult;
 import com.amap.api.services.route.WalkStep;
+import com.amap.api.track.AMapTrackClient;
+import com.amap.api.track.ErrorCode;
+import com.amap.api.track.OnTrackLifecycleListener;
+import com.amap.api.track.TrackParam;
+import com.amap.api.track.query.model.AddTerminalRequest;
+import com.amap.api.track.query.model.AddTerminalResponse;
+import com.amap.api.track.query.model.AddTrackResponse;
+import com.amap.api.track.query.model.DistanceResponse;
+import com.amap.api.track.query.model.HistoryTrackResponse;
+import com.amap.api.track.query.model.LatestPointResponse;
+import com.amap.api.track.query.model.OnTrackListener;
+import com.amap.api.track.query.model.ParamErrorResponse;
+import com.amap.api.track.query.model.QueryTerminalRequest;
+import com.amap.api.track.query.model.QueryTerminalResponse;
+import com.amap.api.track.query.model.QueryTrackResponse;
 import com.google.gson.Gson;
 
 import org.json.JSONObject;
@@ -117,7 +132,7 @@
 
 public class NavFragment extends Fragment implements PoiSearch.OnPoiSearchListener,
         Inputtips.InputtipsListener,GeocodeSearch.OnGeocodeSearchListener,
-        RouteSearch.OnRouteSearchListener,NearbySearch.NearbyListener,AMap.OnMarkerClickListener {
+        RouteSearch.OnRouteSearchListener,NearbySearch.NearbyListener,AMap.OnMarkerClickListener ,OnTrackLifecycleListener{
     private MapView mMapView;
     public AMapLocationClient mLocationClient;
     //声明AMapLocationClientOption对象
@@ -160,6 +175,8 @@
     private long stopTime;
     private OkHttpClient okHttpClient;
     traceTime traceTime;
+    AMapTrackClient aMapTrackClient=new AMapTrackClient(MyApplication.getMyContext());
+
 
 
 
@@ -179,6 +196,7 @@
     public void onActivityCreated(@Nullable Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
         setUpMap();
+        DevUtils.init(MyApplication.getMyContext());
         ImageView help = getActivity().findViewById(R.id.emergency_help);
         uploadNearbyInfo();
         nearByview = getActivity().findViewById(R.id.nearBy);
@@ -256,6 +274,20 @@
         });
         setRandomRoute();
         run = getActivity().findViewById(R.id.run);
+        run.setOnClickListener(new View.OnClickListener() {
+            int flag=0;
+            @Override
+            public void onClick(View v) {
+                switch (flag){
+                    case 0:
+                        uploadRunTrace();
+                        flag++;
+                        break;
+                    case 1:
+                        aMapTrackClient.stopGather(NavFragment.this);
+                }
+            }
+        });
     }
     /**
      * 初始化高德地图
@@ -669,6 +701,147 @@
         }
     }
 
+    public void uploadRunTrace(){
+        final long serviceId = 16004;  // 这里填入你创建的服务id
+        final String terminalName = PhoneUtils.getIMEI();   // 唯一标识某个用户或某台设备的名称
+        aMapTrackClient.queryTerminal(new QueryTerminalRequest(serviceId, terminalName), new OnTrackListener() {
+            @Override
+            public void onQueryTerminalCallback(QueryTerminalResponse queryTerminalResponse) {
+                if (queryTerminalResponse.isSuccess()) {
+                    if (queryTerminalResponse.getTid() <= 0) {
+                        // terminal还不存在，先创建
+                        aMapTrackClient.addTerminal(new AddTerminalRequest(terminalName, serviceId), new OnTrackListener() {
+                            @Override
+                            public void onQueryTerminalCallback(QueryTerminalResponse queryTerminalResponse) {
+
+                            }
+
+                            @Override
+                            public void onCreateTerminalCallback(AddTerminalResponse addTerminalResponse) {
+                                if (addTerminalResponse.isSuccess()) {
+                                    // 创建完成，开启猎鹰服务
+                                    long terminalId = addTerminalResponse.getTid();
+                                    aMapTrackClient.startTrack(new TrackParam(serviceId, terminalId), NavFragment.this);
+                                } else {
+                                    // 请求失败
+                                    Toast.makeText(MyApplication.getMyContext(), "请求失败，" + addTerminalResponse.getErrorMsg(), Toast.LENGTH_SHORT).show();
+                                }
+                            }
+
+                            @Override
+                            public void onDistanceCallback(DistanceResponse distanceResponse) {
+
+                            }
+
+                            @Override
+                            public void onLatestPointCallback(LatestPointResponse latestPointResponse) {
+
+                            }
+
+                            @Override
+                            public void onHistoryTrackCallback(HistoryTrackResponse historyTrackResponse) {
+
+                            }
+
+                            @Override
+                            public void onQueryTrackCallback(QueryTrackResponse queryTrackResponse) {
+
+                            }
+
+                            @Override
+                            public void onAddTrackCallback(AddTrackResponse addTrackResponse) {
+
+                            }
+
+                            @Override
+                            public void onParamErrorCallback(ParamErrorResponse paramErrorResponse) {
+
+                            }
+                        });
+                    } else {
+                        // terminal已经存在，直接开启猎鹰服务
+                        long terminalId = queryTerminalResponse.getTid();
+                        aMapTrackClient.startTrack(new TrackParam(serviceId, terminalId), NavFragment.this);
+                    }
+                } else {
+                    // 请求失败
+                    Toast.makeText(MyApplication.getMyContext(), "请求失败，" + queryTerminalResponse.getErrorMsg(), Toast.LENGTH_SHORT).show();
+                }
+            }
+
+            @Override
+            public void onCreateTerminalCallback(AddTerminalResponse addTerminalResponse) {
+
+            }
+
+            @Override
+            public void onDistanceCallback(DistanceResponse distanceResponse) {
+
+            }
+
+            @Override
+            public void onLatestPointCallback(LatestPointResponse latestPointResponse) {
+
+            }
+
+            @Override
+            public void onHistoryTrackCallback(HistoryTrackResponse historyTrackResponse) {
+
+            }
+
+            @Override
+            public void onQueryTrackCallback(QueryTrackResponse queryTrackResponse) {
+
+            }
+
+            @Override
+            public void onAddTrackCallback(AddTrackResponse addTrackResponse) {
+
+            }
+
+            @Override
+            public void onParamErrorCallback(ParamErrorResponse paramErrorResponse) {
+
+            }
+        });
+    }
+    @Override
+    public void onBindServiceCallback(int i, String s) {
+
+    }
+
+    @Override
+    public void onStartGatherCallback(int i, String s) {
+        if (i == ErrorCode.TrackListen.START_GATHER_SUCEE ||
+                i == ErrorCode.TrackListen.START_GATHER_ALREADY_STARTED) {
+            Toast.makeText(MyApplication.getMyContext(),"定位采集开启成功！", Toast.LENGTH_SHORT).show();
+        } else {
+            Toast.makeText(MyApplication.getMyContext(), "定位采集启动异常，" + s, Toast.LENGTH_SHORT).show();
+        }
+    }
+
+    @Override
+    public void onStartTrackCallback(int i, String s) {
+        if (i == ErrorCode.TrackListen.START_TRACK_SUCEE ||
+                i == ErrorCode.TrackListen.START_TRACK_SUCEE_NO_NETWORK ||
+                i == ErrorCode.TrackListen.START_TRACK_ALREADY_STARTED) {
+            // 服务启动成功，继续开启收集上报
+            aMapTrackClient.startGather(this);
+        } else {
+            Toast.makeText(MyApplication.getMyContext(), "轨迹上报服务服务启动异常，" + s, Toast.LENGTH_SHORT).show();
+        }
+    }
+
+    @Override
+    public void onStopGatherCallback(int i, String s) {
+
+    }
+
+    @Override
+    public void onStopTrackCallback(int i, String s) {
+
+    }
+
     @Override
     public boolean onMarkerClick(Marker marker) {
         marker.showInfoWindow();
