Index: app/src/main/java/cn/edu/uestc/meet_on_the_road_of_uestc/fragment/NavFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.edu.uestc.meet_on_the_road_of_uestc.fragment;\n\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.support.v4.app.Fragment;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.ImageView;\nimport android.widget.Toast;\n\nimport com.amap.api.maps.AMap;\nimport com.amap.api.maps.CameraUpdateFactory;\nimport com.amap.api.maps.MapView;\nimport com.amap.api.maps.UiSettings;\nimport com.amap.api.maps.model.MyLocationStyle;\n\nimport cn.edu.uestc.meet_on_the_road_of_uestc.MyApplication;\nimport cn.edu.uestc.meet_on_the_road_of_uestc.R;\n\npublic class NavFragment extends Fragment {\n    private MapView mMapView;\n//    onClickListener mOnClickListener=new onClickListener();\n\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view=getLayoutInflater().inflate(R.layout.fragment_nav,container,false);\n        //获取地图控件引用\n        mMapView = view.findViewById(R.id.map);\n        //在activity执行onCreate时执行mMapView.onCreate(savedInstanceState)，创建地图\n        mMapView.onCreate(savedInstanceState);\n        AMap aMap = mMapView.getMap();\n        MyLocationStyle myLocationStyle;\n        myLocationStyle = new MyLocationStyle();//初始化定位蓝点样式类myLocationStyle.myLocationType(MyLocationStyle.LOCATION_TYPE_LOCATION_ROTATE);//连续定位、且将视角移动到地图中心点，定位点依照设备方向旋转，并且会跟随设备移动。（1秒1次定位）如果不设置myLocationType，默认也会执行此种模式。\n        myLocationStyle.interval(2000); //设置连续定位模式下的定位间隔，只在连续定位模式下生效，单次定位模式下不会生效。单位为毫秒。\n        aMap.setMyLocationStyle(myLocationStyle);//设置定位蓝点的Style\n        aMap.getUiSettings().setMyLocationButtonEnabled(false);//设置默认定位按钮是否显示，非必需设置。\n        myLocationStyle.myLocationType(MyLocationStyle.LOCATION_TYPE_LOCATION_ROTATE);//连续定位、且将视角移动到地图中心点，定位点依照设备方向旋转，并且会跟随设备移动。（1秒1次定位）默认执行此种模式。\n        aMap.setMyLocationEnabled(true);// 设置为true表示启动显示定位蓝点，false表示隐藏定位蓝点并不进行定位，默认是false。\n        UiSettings mUiSettings=aMap.getUiSettings();//获取UI设置类\n        aMap.moveCamera(CameraUpdateFactory.zoomTo(19));//设置默认缩放级别\n        return view;\n    }\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n\n        super.onActivityCreated(savedInstanceState);\n\n        Button button = getActivity().findViewById(R.id.emergency_help);\n        button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                    Intent intent=new Intent(Intent.ACTION_DIAL);\n                    intent.setData(Uri.parse(\"tel:61830110\"));\n                    startActivity(intent);\n            }\n        });\n    }\n\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        //在activity执行onDestroy时执行mMapView.onDestroyView()，销毁地图\n        mMapView.onDestroy();\n    }\n    @Override\n    public void onResume() {\n        super.onResume();\n        //在activity执行onResume时执行mMapView.onResume ()，重新绘制加载地图\n        mMapView.onResume();\n    }\n    @Override\n    public void onPause() {\n        super.onPause();\n        //在activity执行onPause时执行mMapView.onPause ()，暂停地图的绘制\n        mMapView.onPause();\n    }\n    @Override\n    public void onSaveInstanceState(Bundle outState) {\n        super.onSaveInstanceState(outState);\n        //在activity执行onSaveInstanceState时执行mMapView.onSaveInstanceState (outState)，保存地图当前的状态\n        mMapView.onSaveInstanceState(outState);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/cn/edu/uestc/meet_on_the_road_of_uestc/fragment/NavFragment.java	(revision b1f34183dfa9c707fb16393f9702fdd76bfe673b)
+++ app/src/main/java/cn/edu/uestc/meet_on_the_road_of_uestc/fragment/NavFragment.java	(date 1543493359418)
@@ -16,6 +16,8 @@
 import android.widget.ImageView;
 import android.widget.Toast;
 
+import com.amap.api.location.AMapLocationClient;
+import com.amap.api.location.AMapLocationClientOption;
 import com.amap.api.maps.AMap;
 import com.amap.api.maps.CameraUpdateFactory;
 import com.amap.api.maps.MapView;
@@ -37,16 +39,7 @@
         mMapView = view.findViewById(R.id.map);
         //在activity执行onCreate时执行mMapView.onCreate(savedInstanceState)，创建地图
         mMapView.onCreate(savedInstanceState);
-        AMap aMap = mMapView.getMap();
-        MyLocationStyle myLocationStyle;
-        myLocationStyle = new MyLocationStyle();//初始化定位蓝点样式类myLocationStyle.myLocationType(MyLocationStyle.LOCATION_TYPE_LOCATION_ROTATE);//连续定位、且将视角移动到地图中心点，定位点依照设备方向旋转，并且会跟随设备移动。（1秒1次定位）如果不设置myLocationType，默认也会执行此种模式。
-        myLocationStyle.interval(2000); //设置连续定位模式下的定位间隔，只在连续定位模式下生效，单次定位模式下不会生效。单位为毫秒。
-        aMap.setMyLocationStyle(myLocationStyle);//设置定位蓝点的Style
-        aMap.getUiSettings().setMyLocationButtonEnabled(false);//设置默认定位按钮是否显示，非必需设置。
-        myLocationStyle.myLocationType(MyLocationStyle.LOCATION_TYPE_LOCATION_ROTATE);//连续定位、且将视角移动到地图中心点，定位点依照设备方向旋转，并且会跟随设备移动。（1秒1次定位）默认执行此种模式。
-        aMap.setMyLocationEnabled(true);// 设置为true表示启动显示定位蓝点，false表示隐藏定位蓝点并不进行定位，默认是false。
-        UiSettings mUiSettings=aMap.getUiSettings();//获取UI设置类
-        aMap.moveCamera(CameraUpdateFactory.zoomTo(19));//设置默认缩放级别
+        setMap();
         return view;
     }
 
@@ -66,6 +59,64 @@
         });
     }
 
+    private void setMap(){
+// 设置定位监听
+        mAMap.setLocationSource(this);
+        // 设置为true表示显示定位层并可触发定位
+        mAMap.setMyLocationEnabled(true);
+
+        UiSettings uiSettings = mAMap.getUiSettings();
+        uiSettings.setCompassEnabled(true);// 设置指南针是否显示
+        uiSettings.setZoomControlsEnabled(true);// 设置缩放按钮是否显示
+        uiSettings.setScaleControlsEnabled(true);// 设置比例尺是否显示
+        uiSettings.setRotateGesturesEnabled(true);// 设置地图旋转是否可用
+        uiSettings.setTiltGesturesEnabled(true);// 设置地图倾斜是否可用
+        uiSettings.setMyLocationButtonEnabled(false);// 设置默认定位按钮是否显示
+
+        // 自定义系统定位蓝点
+        MyLocationStyle myLocationStyle = new MyLocationStyle();
+        //设置连续定位模式下的定位间隔，只在连续定位模式下生效，单次定位模式下不会生效。单位为毫秒。
+        myLocationStyle.interval(2000);
+        // 自定义定位蓝点图标
+        myLocationStyle.myLocationIcon(BitmapDescriptorFactory.fromResource(R.drawable.ic_gps_pos));
+        // 自定义精度范围的圆形边框颜色
+        myLocationStyle.strokeColor(Color.argb(0x44, 0, 0, 0xff));
+        // 自定义精度范围的圆形边框宽度
+        myLocationStyle.strokeWidth(1);
+        // 设置圆形的填充颜色
+        myLocationStyle.radiusFillColor(Color.argb(0x22, 0, 0, 0xff));
+        //连续定位、蓝点不自动移动到地图中心点，定位点依照设备方向旋转，并且蓝点会跟随设备移动（最常用的）
+        myLocationStyle.myLocationType(MyLocationStyle.LOCATION_TYPE_LOCATION_ROTATE_NO_CENTER);
+        // 将自定义的 myLocationStyle 对象添加到地图上
+        mAMap.setMyLocationStyle(myLocationStyle);
+
+        mLocationClient = new AMapLocationClient(this);
+        mLocationClient.setLocationListener(this);
+        // 设置定位监听
+        AMapLocationClientOption mLocationOption = new AMapLocationClientOption();
+        // 设置为高精度定位模式
+        mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);
+        // 设置是否返回地址信息（默认返回地址信息）
+        mLocationOption.setNeedAddress(true);
+        //设置是否只定位一次,默认为false
+        mLocationOption.setOnceLocation(false);
+        //设置是否强制刷新WIFI，默认为强制刷新
+        mLocationOption.setWifiScan(true);
+        //设置是否允许模拟位置,默认为false，不允许模拟位置
+        mLocationOption.setMockEnable(false);
+        //设置定位间隔,单位毫秒,默认为2000ms
+        mLocationOption.setInterval(2000);
+        //缓存机制
+        mLocationOption.setLocationCacheEnable(true);
+        //给定位客户端对象设置定位参数
+        mLocationClient.setLocationOption(mLocationOption);
+        //启动定位
+        isFirstLoc = true;
+        mLocationClient.startLocation();
+        UiSettings mUiSettings=aMap.getUiSettings();//获取UI设置类
+        aMap.moveCamera(CameraUpdateFactory.zoomTo(19));//设置默认缩放级别
+
+    }
     @Override
     public void onDestroyView() {
         super.onDestroyView();
