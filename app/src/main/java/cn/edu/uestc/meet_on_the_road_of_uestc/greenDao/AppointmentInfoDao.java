package cn.edu.uestc.meet_on_the_road_of_uestc.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.edu.uestc.meet_on_the_road_of_uestc.greenDao.eneities.AppointmentInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APPOINTMENT_INFO".
*/
public class AppointmentInfoDao extends AbstractDao<AppointmentInfo, String> {

    public static final String TABLENAME = "APPOINTMENT_INFO";

    /**
     * Properties of entity AppointmentInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AppointmentUID = new Property(0, String.class, "appointmentUID", true, "APPOINTMENT_UID");
        public final static Property PublishTime = new Property(1, String.class, "publishTime", false, "PUBLISH_TIME");
        public final static Property WhoPublish = new Property(2, String.class, "whoPublish", false, "WHO_PUBLISH");
        public final static Property WhoPublishStuID = new Property(3, String.class, "whoPublishStuID", false, "WHO_PUBLISH_STU_ID");
        public final static Property WhoPublishStuGrade = new Property(4, int.class, "whoPublishStuGrade", false, "WHO_PUBLISH_STU_GRADE");
        public final static Property WhoPublishStuMajor = new Property(5, String.class, "whoPublishStuMajor", false, "WHO_PUBLISH_STU_MAJOR");
        public final static Property Location = new Property(6, String.class, "location", false, "LOCATION");
        public final static Property AppointmentTime = new Property(7, String.class, "appointmentTime", false, "APPOINTMENT_TIME");
        public final static Property AppointmentLatitude = new Property(8, double.class, "appointmentLatitude", false, "APPOINTMENT_LATITUDE");
        public final static Property AppointmentLongtitude = new Property(9, double.class, "appointmentLongtitude", false, "APPOINTMENT_LONGTITUDE");
        public final static Property AppointmentNum = new Property(10, int.class, "appointmentNum", false, "APPOINTMENT_NUM");
    }


    public AppointmentInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppointmentInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APPOINTMENT_INFO\" (" + //
                "\"APPOINTMENT_UID\" TEXT PRIMARY KEY NOT NULL ," + // 0: appointmentUID
                "\"PUBLISH_TIME\" TEXT," + // 1: publishTime
                "\"WHO_PUBLISH\" TEXT," + // 2: whoPublish
                "\"WHO_PUBLISH_STU_ID\" TEXT," + // 3: whoPublishStuID
                "\"WHO_PUBLISH_STU_GRADE\" INTEGER NOT NULL ," + // 4: whoPublishStuGrade
                "\"WHO_PUBLISH_STU_MAJOR\" TEXT," + // 5: whoPublishStuMajor
                "\"LOCATION\" TEXT," + // 6: location
                "\"APPOINTMENT_TIME\" TEXT," + // 7: appointmentTime
                "\"APPOINTMENT_LATITUDE\" REAL NOT NULL ," + // 8: appointmentLatitude
                "\"APPOINTMENT_LONGTITUDE\" REAL NOT NULL ," + // 9: appointmentLongtitude
                "\"APPOINTMENT_NUM\" INTEGER NOT NULL );"); // 10: appointmentNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPOINTMENT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppointmentInfo entity) {
        stmt.clearBindings();
 
        String appointmentUID = entity.getAppointmentUID();
        if (appointmentUID != null) {
            stmt.bindString(1, appointmentUID);
        }
 
        String publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindString(2, publishTime);
        }
 
        String whoPublish = entity.getWhoPublish();
        if (whoPublish != null) {
            stmt.bindString(3, whoPublish);
        }
 
        String whoPublishStuID = entity.getWhoPublishStuID();
        if (whoPublishStuID != null) {
            stmt.bindString(4, whoPublishStuID);
        }
        stmt.bindLong(5, entity.getWhoPublishStuGrade());
 
        String whoPublishStuMajor = entity.getWhoPublishStuMajor();
        if (whoPublishStuMajor != null) {
            stmt.bindString(6, whoPublishStuMajor);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(7, location);
        }
 
        String appointmentTime = entity.getAppointmentTime();
        if (appointmentTime != null) {
            stmt.bindString(8, appointmentTime);
        }
        stmt.bindDouble(9, entity.getAppointmentLatitude());
        stmt.bindDouble(10, entity.getAppointmentLongtitude());
        stmt.bindLong(11, entity.getAppointmentNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppointmentInfo entity) {
        stmt.clearBindings();
 
        String appointmentUID = entity.getAppointmentUID();
        if (appointmentUID != null) {
            stmt.bindString(1, appointmentUID);
        }
 
        String publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindString(2, publishTime);
        }
 
        String whoPublish = entity.getWhoPublish();
        if (whoPublish != null) {
            stmt.bindString(3, whoPublish);
        }
 
        String whoPublishStuID = entity.getWhoPublishStuID();
        if (whoPublishStuID != null) {
            stmt.bindString(4, whoPublishStuID);
        }
        stmt.bindLong(5, entity.getWhoPublishStuGrade());
 
        String whoPublishStuMajor = entity.getWhoPublishStuMajor();
        if (whoPublishStuMajor != null) {
            stmt.bindString(6, whoPublishStuMajor);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(7, location);
        }
 
        String appointmentTime = entity.getAppointmentTime();
        if (appointmentTime != null) {
            stmt.bindString(8, appointmentTime);
        }
        stmt.bindDouble(9, entity.getAppointmentLatitude());
        stmt.bindDouble(10, entity.getAppointmentLongtitude());
        stmt.bindLong(11, entity.getAppointmentNum());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public AppointmentInfo readEntity(Cursor cursor, int offset) {
        AppointmentInfo entity = new AppointmentInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // appointmentUID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // publishTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // whoPublish
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // whoPublishStuID
            cursor.getInt(offset + 4), // whoPublishStuGrade
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // whoPublishStuMajor
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // location
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // appointmentTime
            cursor.getDouble(offset + 8), // appointmentLatitude
            cursor.getDouble(offset + 9), // appointmentLongtitude
            cursor.getInt(offset + 10) // appointmentNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppointmentInfo entity, int offset) {
        entity.setAppointmentUID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPublishTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWhoPublish(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWhoPublishStuID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWhoPublishStuGrade(cursor.getInt(offset + 4));
        entity.setWhoPublishStuMajor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLocation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAppointmentTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAppointmentLatitude(cursor.getDouble(offset + 8));
        entity.setAppointmentLongtitude(cursor.getDouble(offset + 9));
        entity.setAppointmentNum(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AppointmentInfo entity, long rowId) {
        return entity.getAppointmentUID();
    }
    
    @Override
    public String getKey(AppointmentInfo entity) {
        if(entity != null) {
            return entity.getAppointmentUID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppointmentInfo entity) {
        return entity.getAppointmentUID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
