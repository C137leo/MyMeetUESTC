package cn.edu.uestc.meet_on_the_road_of_uestc.greenDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import cn.edu.uestc.meet_on_the_road_of_uestc.greenDao.eneities.traceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRACE_INFO".
*/
public class traceInfoDao extends AbstractDao<traceInfo, Long> {

    public static final String TABLENAME = "TRACE_INFO";

    /**
     * Properties of entity traceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Time = new Property(0, Long.class, "time", true, "_id");
        public final static Property StuID = new Property(1, Long.class, "stuID", false, "STU_ID");
        public final static Property Latitude = new Property(2, Long.class, "latitude", false, "LATITUDE");
        public final static Property Lontitude = new Property(3, Long.class, "lontitude", false, "LONTITUDE");
        public final static Property Speed = new Property(4, Long.class, "speed", false, "SPEED");
        public final static Property AvgSpeed = new Property(5, Long.class, "avgSpeed", false, "AVG_SPEED");
    }

    private Query<traceInfo> stuInfo_TraceInfoListQuery;

    public traceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public traceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRACE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: time
                "\"STU_ID\" INTEGER," + // 1: stuID
                "\"LATITUDE\" INTEGER," + // 2: latitude
                "\"LONTITUDE\" INTEGER," + // 3: lontitude
                "\"SPEED\" INTEGER," + // 4: speed
                "\"AVG_SPEED\" INTEGER);"); // 5: avgSpeed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRACE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, traceInfo entity) {
        stmt.clearBindings();
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(1, time);
        }
 
        Long stuID = entity.getStuID();
        if (stuID != null) {
            stmt.bindLong(2, stuID);
        }
 
        Long latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindLong(3, latitude);
        }
 
        Long lontitude = entity.getLontitude();
        if (lontitude != null) {
            stmt.bindLong(4, lontitude);
        }
 
        Long speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindLong(5, speed);
        }
 
        Long avgSpeed = entity.getAvgSpeed();
        if (avgSpeed != null) {
            stmt.bindLong(6, avgSpeed);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, traceInfo entity) {
        stmt.clearBindings();
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(1, time);
        }
 
        Long stuID = entity.getStuID();
        if (stuID != null) {
            stmt.bindLong(2, stuID);
        }
 
        Long latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindLong(3, latitude);
        }
 
        Long lontitude = entity.getLontitude();
        if (lontitude != null) {
            stmt.bindLong(4, lontitude);
        }
 
        Long speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindLong(5, speed);
        }
 
        Long avgSpeed = entity.getAvgSpeed();
        if (avgSpeed != null) {
            stmt.bindLong(6, avgSpeed);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public traceInfo readEntity(Cursor cursor, int offset) {
        traceInfo entity = new traceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // time
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // stuID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // latitude
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // lontitude
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // speed
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // avgSpeed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, traceInfo entity, int offset) {
        entity.setTime(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStuID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLatitude(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setLontitude(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSpeed(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setAvgSpeed(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(traceInfo entity, long rowId) {
        entity.setTime(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(traceInfo entity) {
        if(entity != null) {
            return entity.getTime();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(traceInfo entity) {
        return entity.getTime() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "traceInfoList" to-many relationship of StuInfo. */
    public List<traceInfo> _queryStuInfo_TraceInfoList(Long stuID) {
        synchronized (this) {
            if (stuInfo_TraceInfoListQuery == null) {
                QueryBuilder<traceInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.StuID.eq(null));
                stuInfo_TraceInfoListQuery = queryBuilder.build();
            }
        }
        Query<traceInfo> query = stuInfo_TraceInfoListQuery.forCurrentThread();
        query.setParameter(0, stuID);
        return query.list();
    }

}
